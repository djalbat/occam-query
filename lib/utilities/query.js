"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByClass = queryByClass;
exports.queryByClasses = queryByClasses;
exports.queryByExpression = queryByExpression;

var _query = _interopRequireDefault(require("../query"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function queryByClass(node, Class) {
  var nodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (node instanceof Class) {
    nodes.push(node);
  }

  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var childNodes = node.getChildNodes();
    childNodes.forEach(function (childNode) {
      queryByClass(childNode, Class, nodes);
    });
  }

  return nodes;
}

function queryByClasses(node, Classes) {
  var nodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  Classes.some(function (Class) {
    if (node instanceof Class) {
      nodes.push(node);
      return true;
    }
  });
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var childNodes = node.getChildNodes();
    childNodes.forEach(function (childNode) {
      queryByClasses(childNode, Classes, nodes);
    });
  }

  return nodes;
}

function queryByExpression(node, expression, maximumDepth) {
  var query = _query["default"].fromExpression(expression, maximumDepth),
      nodes = query.execute(node);

  return nodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXJ5LmpzIl0sIm5hbWVzIjpbInF1ZXJ5QnlDbGFzcyIsIm5vZGUiLCJDbGFzcyIsIm5vZGVzIiwicHVzaCIsIm5vZGVOb25UZXJtaW5hbE5vZGUiLCJpc05vblRlcm1pbmFsTm9kZSIsImNoaWxkTm9kZXMiLCJnZXRDaGlsZE5vZGVzIiwiZm9yRWFjaCIsImNoaWxkTm9kZSIsInF1ZXJ5QnlDbGFzc2VzIiwiQ2xhc3NlcyIsInNvbWUiLCJxdWVyeUJ5RXhwcmVzc2lvbiIsImV4cHJlc3Npb24iLCJtYXhpbXVtRGVwdGgiLCJxdWVyeSIsIlF1ZXJ5IiwiZnJvbUV4cHJlc3Npb24iLCJleGVjdXRlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBRUE7Ozs7QUFFTyxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QkMsS0FBNUIsRUFBK0M7QUFBQSxNQUFaQyxLQUFZLHVFQUFKLEVBQUk7O0FBQ3BELE1BQUlGLElBQUksWUFBWUMsS0FBcEIsRUFBMkI7QUFDekJDLElBQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXSCxJQUFYO0FBQ0Q7O0FBRUQsTUFBTUksbUJBQW1CLEdBQUdKLElBQUksQ0FBQ0ssaUJBQUwsRUFBNUI7O0FBRUEsTUFBSUQsbUJBQUosRUFBeUI7QUFDdkIsUUFBTUUsVUFBVSxHQUFHTixJQUFJLENBQUNPLGFBQUwsRUFBbkI7QUFFQUQsSUFBQUEsVUFBVSxDQUFDRSxPQUFYLENBQW1CLFVBQVNDLFNBQVQsRUFBb0I7QUFDckNWLE1BQUFBLFlBQVksQ0FBQ1UsU0FBRCxFQUFZUixLQUFaLEVBQW1CQyxLQUFuQixDQUFaO0FBQ0QsS0FGRDtBQUdEOztBQUVELFNBQU9BLEtBQVA7QUFDRDs7QUFFTSxTQUFTUSxjQUFULENBQXdCVixJQUF4QixFQUE4QlcsT0FBOUIsRUFBbUQ7QUFBQSxNQUFaVCxLQUFZLHVFQUFKLEVBQUk7QUFDeERTLEVBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLFVBQVNYLEtBQVQsRUFBZ0I7QUFDM0IsUUFBSUQsSUFBSSxZQUFZQyxLQUFwQixFQUEyQjtBQUN6QkMsTUFBQUEsS0FBSyxDQUFDQyxJQUFOLENBQVdILElBQVg7QUFFQSxhQUFPLElBQVA7QUFDRDtBQUNGLEdBTkQ7QUFRQSxNQUFNSSxtQkFBbUIsR0FBR0osSUFBSSxDQUFDSyxpQkFBTCxFQUE1Qjs7QUFFQSxNQUFJRCxtQkFBSixFQUF5QjtBQUN2QixRQUFNRSxVQUFVLEdBQUdOLElBQUksQ0FBQ08sYUFBTCxFQUFuQjtBQUVBRCxJQUFBQSxVQUFVLENBQUNFLE9BQVgsQ0FBbUIsVUFBU0MsU0FBVCxFQUFvQjtBQUNyQ0MsTUFBQUEsY0FBYyxDQUFDRCxTQUFELEVBQVlFLE9BQVosRUFBcUJULEtBQXJCLENBQWQ7QUFDRCxLQUZEO0FBR0Q7O0FBRUQsU0FBT0EsS0FBUDtBQUNEOztBQUVNLFNBQVNXLGlCQUFULENBQTJCYixJQUEzQixFQUFpQ2MsVUFBakMsRUFBNkNDLFlBQTdDLEVBQTJEO0FBQ2hFLE1BQU1DLEtBQUssR0FBR0Msa0JBQU1DLGNBQU4sQ0FBcUJKLFVBQXJCLEVBQWlDQyxZQUFqQyxDQUFkO0FBQUEsTUFDTWIsS0FBSyxHQUFHYyxLQUFLLENBQUNHLE9BQU4sQ0FBY25CLElBQWQsQ0FEZDs7QUFHQSxTQUFPRSxLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFF1ZXJ5IGZyb20gXCIuLi9xdWVyeVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlCeUNsYXNzKG5vZGUsIENsYXNzLCBub2RlcyA9IFtdKSB7XG4gIGlmIChub2RlIGluc3RhbmNlb2YgQ2xhc3MpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9XG5cbiAgY29uc3Qgbm9kZU5vblRlcm1pbmFsTm9kZSA9IG5vZGUuaXNOb25UZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBub2RlLmdldENoaWxkTm9kZXMoKTtcblxuICAgIGNoaWxkTm9kZXMuZm9yRWFjaChmdW5jdGlvbihjaGlsZE5vZGUpIHtcbiAgICAgIHF1ZXJ5QnlDbGFzcyhjaGlsZE5vZGUsIENsYXNzLCBub2Rlcyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbm9kZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeUJ5Q2xhc3Nlcyhub2RlLCBDbGFzc2VzLCBub2RlcyA9IFtdKSB7XG4gIENsYXNzZXMuc29tZShmdW5jdGlvbihDbGFzcykge1xuICAgIGlmIChub2RlIGluc3RhbmNlb2YgQ2xhc3MpIHtcbiAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgbm9kZU5vblRlcm1pbmFsTm9kZSA9IG5vZGUuaXNOb25UZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBub2RlLmdldENoaWxkTm9kZXMoKTtcblxuICAgIGNoaWxkTm9kZXMuZm9yRWFjaChmdW5jdGlvbihjaGlsZE5vZGUpIHtcbiAgICAgIHF1ZXJ5QnlDbGFzc2VzKGNoaWxkTm9kZSwgQ2xhc3Nlcywgbm9kZXMpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlCeUV4cHJlc3Npb24obm9kZSwgZXhwcmVzc2lvbiwgbWF4aW11bURlcHRoKSB7XG4gIGNvbnN0IHF1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb24oZXhwcmVzc2lvbiwgbWF4aW11bURlcHRoKSxcbiAgICAgICAgbm9kZXMgPSBxdWVyeS5leGVjdXRlKG5vZGUpO1xuXG4gIHJldHVybiBub2Rlcztcbn1cbiJdfQ==