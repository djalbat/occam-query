"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    endIndexFromSpreadNode: function() {
        return endIndexFromSpreadNode;
    },
    errorNodesFromExpressionNode: function() {
        return errorNodesFromExpressionNode;
    },
    indexFromSpreadNode: function() {
        return indexFromSpreadNode;
    },
    infiniteDescentFromPathNode: function() {
        return infiniteDescentFromPathNode;
    },
    pathNodeFromExpressionNode: function() {
        return pathNodeFromExpressionNode;
    },
    pathNodeFromSubExpressionNode: function() {
        return pathNodeFromSubExpressionNode;
    },
    ruleNamesFromPathNode: function() {
        return ruleNamesFromPathNode;
    },
    spreadNodeFromExpressionNode: function() {
        return spreadNodeFromExpressionNode;
    },
    spreadNodeFromSubExpressionNode: function() {
        return spreadNodeFromSubExpressionNode;
    },
    startIndexFromSpreadNode: function() {
        return startIndexFromSpreadNode;
    },
    subExpressionNodeFromExpressionNode: function() {
        return subExpressionNodeFromExpressionNode;
    },
    subExpressionNodeFromSubExpressionNode: function() {
        return subExpressionNodeFromSubExpressionNode;
    },
    tokenTypesFromPathNode: function() {
        return tokenTypesFromPathNode;
    },
    uniqueFromSpreadNode: function() {
        return uniqueFromSpreadNode;
    }
});
var _array = require("../utilities/array");
var _ruleNames = require("../ruleNames");
function ruleNamesFromPathNode(pathNode) {
    var selectorNodes = selectorNodesFromPathNode(pathNode), ruleNameNodes = selectorNodes.reduce(function(ruleNameNodes, selectorNode) {
        var nonTerminalNode;
        nonTerminalNode = selectorNode; ///
        var childNodes = nonTerminalNode.getChildNodes(), firstChildNode = (0, _array.first)(childNodes);
        nonTerminalNode = firstChildNode; ///
        var ruleName = nonTerminalNode.getRuleName(), ruleNameRuleNameRuleName = ruleName === _ruleNames.RULE_NAME_RULE_NAME;
        if (ruleNameRuleNameRuleName) {
            var ruleNameNode = nonTerminalNode; ///
            ruleNameNodes.push(ruleNameNode);
        }
        return ruleNameNodes;
    }, []), ruleNames = ruleNameNodes.map(function(ruleNameNode) {
        var nonTerminalNode = ruleNameNode, childNodes = nonTerminalNode.getChildNodes(), firstChildNode = (0, _array.first)(childNodes), terminalNode = firstChildNode, content = terminalNode.getContent(), ruleName = content;
        return ruleName;
    });
    return ruleNames;
}
function tokenTypesFromPathNode(pathNode) {
    var selectorNodes = selectorNodesFromPathNode(pathNode), tokenTYpeNodes = selectorNodes.reduce(function(tokenTYpeNodes, selectorNode) {
        var nonTerminalNode;
        nonTerminalNode = selectorNode; ///
        var childNodes = nonTerminalNode.getChildNodes(), firstChildNode = (0, _array.first)(childNodes);
        nonTerminalNode = firstChildNode; ///
        var ruleName = nonTerminalNode.getRuleName(), ruleNameTokenTypeRuleName = ruleName === _ruleNames.TOKEN_TYPE_RULE_NAME;
        if (ruleNameTokenTypeRuleName) {
            var tokenTYpeNode = nonTerminalNode; ///
            tokenTYpeNodes.push(tokenTYpeNode);
        }
        return tokenTYpeNodes;
    }, []), tokenTypes = tokenTYpeNodes.map(function(tokenTypeNode) {
        var nonTerminalNode = tokenTypeNode, childNodes = nonTerminalNode.getChildNodes(), thirdChildNode = (0, _array.third)(childNodes), terminalNode = thirdChildNode, content = terminalNode.getContent(), tokenType = content;
        return tokenType;
    });
    return tokenTypes;
}
function infiniteDescentFromPathNode(pathNode) {
    var nonTerminalNode;
    nonTerminalNode = pathNode; ///
    var childNodes = nonTerminalNode.getChildNodes(), secondChildNode = (0, _array.second)(childNodes);
    nonTerminalNode = secondChildNode; ///
    var ruleName = nonTerminalNode.getRuleName(), ruleNameInfiniteDescentRuleName = ruleName === _ruleNames.INFINITE_DESCENT_RULE_NAME, infiniteDescent = ruleNameInfiniteDescentRuleName; ///
    return infiniteDescent;
}
function uniqueFromSpreadNode(spreadNode) {
    var unique = false;
    var nonTerminalNode = spreadNode, childNodes = nonTerminalNode.getChildNodes(), firstChildNode = (0, _array.first)(childNodes), firstChildNodeNonTerminalNode = firstChildNode.isNonTerminalNode();
    if (firstChildNodeNonTerminalNode) {
        var nonTerminalNode1 = firstChildNode, ruleName = nonTerminalNode1.getRuleName(), ruleNameUniqueRuleName = ruleName === _ruleNames.UNIQUE_RULE_NAME;
        if (ruleNameUniqueRuleName) {
            unique = true;
        }
    }
    return unique;
}
function indexFromSpreadNode(spreadNode) {
    var index = null;
    var nonTerminalNode = spreadNode, childNodes = nonTerminalNode.getChildNodes(), indexNode = childNodes.find(function(childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            var nonTerminalNode = childNode, ruleName = nonTerminalNode.getRuleName(), ruleNameIndexRuleName = ruleName === _ruleNames.INDEX_RULE_NAME;
            if (ruleNameIndexRuleName) {
                return true;
            }
        }
    }) || null;
    if (indexNode !== null) {
        index = indexFromIndexNode(indexNode);
    }
    return index;
}
function endIndexFromSpreadNode(spreadNode) {
    var endIndex = Infinity;
    var nonTerminalNode = spreadNode, childNodes = nonTerminalNode.getChildNodes(), endIndexNode = childNodes.find(function(childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            var nonTerminalNode = childNode, ruleName = nonTerminalNode.getRuleName(), ruleNameEndIndexRuleName = ruleName === _ruleNames.END_INDEX_RULE_NAME;
            if (ruleNameEndIndexRuleName) {
                return true;
            }
        }
    }) || null;
    if (endIndexNode !== null) {
        endIndex = indexFromIndexNode(endIndexNode);
    }
    return endIndex;
}
function startIndexFromSpreadNode(spreadNode) {
    var startIndex = 0;
    var nonTerminalNode = spreadNode, childNodes = nonTerminalNode.getChildNodes(), startIndexNode = childNodes.find(function(childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            var nonTerminalNode = childNode, ruleName = nonTerminalNode.getRuleName(), ruleNameStartIndexRuleName = ruleName === _ruleNames.START_INDEX_RULE_NAME;
            if (ruleNameStartIndexRuleName) {
                return true;
            }
        }
    }) || null;
    if (startIndexNode !== null) {
        startIndex = indexFromIndexNode(startIndexNode);
    }
    return startIndex;
}
function pathNodeFromExpressionNode(expressionNode) {
    var nonTerminalNode = expressionNode, childNodes = nonTerminalNode.getChildNodes(), firstChildNode = (0, _array.first)(childNodes), pathNode = firstChildNode; ///
    return pathNode;
}
function spreadNodeFromExpressionNode(expressionNode) {
    var spreadNode = null;
    var nonTerminalNode = expressionNode, childNodes = nonTerminalNode.getChildNodes(), childNodesLength = childNodes.length;
    if (childNodesLength > 1) {
        var secondChildNode = (0, _array.second)(childNodes), secondChildNodeRuleName = secondChildNode.getRuleName(), ruleNameSpreadRuleName = secondChildNodeRuleName === _ruleNames.SPREAD_RULE_NAME;
        if (ruleNameSpreadRuleName) {
            spreadNode = secondChildNode; ///
        }
    }
    return spreadNode;
}
function errorNodesFromExpressionNode(expressionNode) {
    var nonTerminalNode = expressionNode, childNodes = nonTerminalNode.getChildNodes(), errorNodes = childNodes.reduce(function(errorNodes, childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            var nonTerminalNode = childNode, ruleName = nonTerminalNode.getRuleName(), ruleNameErrorRuleName = ruleName === _ruleNames.ERROR_RULE_NAME;
            if (ruleNameErrorRuleName) {
                var errorNode = nonTerminalNode; ///
                errorNodes.push(errorNode);
            }
        }
        return errorNodes;
    }, []);
    return errorNodes;
}
function subExpressionNodeFromExpressionNode(expressionNode) {
    var subExpressionNode = null;
    var nonTerminalNode = expressionNode, childNodes = nonTerminalNode.getChildNodes(), childNodesLength = childNodes.length;
    if (childNodesLength > 1) {
        var lastChildNode = (0, _array.last)(childNodes), lastChildNodeRuleName = lastChildNode.getRuleName(), ruleNameSubExpressionRuleName = lastChildNodeRuleName === _ruleNames.SUB_EXPRESSION_RULE_NAME;
        if (ruleNameSubExpressionRuleName) {
            subExpressionNode = lastChildNode; ///
        }
    }
    return subExpressionNode;
}
function pathNodeFromSubExpressionNode(subExpressionNode) {
    var nonTerminalNode = subExpressionNode, childNodes = nonTerminalNode.getChildNodes(), firstChildNode = (0, _array.first)(childNodes), pathNode = firstChildNode; ///
    return pathNode;
}
function spreadNodeFromSubExpressionNode(subExpressionNode) {
    var spreadNode = null;
    var nonTerminalNode = subExpressionNode, childNodes = nonTerminalNode.getChildNodes(), childNodesLength = childNodes.length;
    if (childNodesLength > 1) {
        var secondChildNode = (0, _array.second)(childNodes), secondChildNodeRuleName = secondChildNode.getRuleName(), ruleNameSpreadRuleName = secondChildNodeRuleName === _ruleNames.SPREAD_RULE_NAME;
        if (ruleNameSpreadRuleName) {
            spreadNode = secondChildNode; ///
        }
    }
    return spreadNode;
}
function subExpressionNodeFromSubExpressionNode(subExpressionNode) {
    var nonTerminalNode = subExpressionNode; ///
    subExpressionNode = null;
    var childNodes = nonTerminalNode.getChildNodes(), childNodesLength = childNodes.length;
    if (childNodesLength > 1) {
        var lastChildNode = (0, _array.last)(childNodes), lastChildNodeRuleName = lastChildNode.getRuleName(), ruleNameSubExpressionRuleName = lastChildNodeRuleName === _ruleNames.SUB_EXPRESSION_RULE_NAME;
        if (ruleNameSubExpressionRuleName) {
            subExpressionNode = lastChildNode; ///
        }
    }
    return subExpressionNode;
}
function indexFromIndexNode(indexNode) {
    var nonTerminalNode = indexNode, childNodes = nonTerminalNode.getChildNodes(), firstChildNode = (0, _array.first)(childNodes), terminalNode = firstChildNode, content = terminalNode.getContent(), index = Number(content);
    return index;
}
function selectorNodesFromPathNode(pathNode) {
    var childNodes, nonTerminalNode;
    nonTerminalNode = pathNode; ///
    childNodes = nonTerminalNode.getChildNodes();
    var lastChildNode = (0, _array.last)(childNodes), selectorsNode = lastChildNode; ///
    nonTerminalNode = selectorsNode; ///
    childNodes = nonTerminalNode.getChildNodes();
    var selectorNodes = childNodes.filter(function(childNode) {
        var childNodeNonTerminalNode = childNode.isNonTerminalNode();
        if (childNodeNonTerminalNode) {
            return true;
        }
    });
    return selectorNodes;
}

//# sourceMappingURL=data:application/json;base64,