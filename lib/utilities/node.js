'use strict';

var parsers = require('occam-parsers'),
    ///
necessary = require('necessary');

var NonTerminalNode = parsers.NonTerminalNode,
    arrayUtilities = necessary.arrayUtilities,
    replace = arrayUtilities.replace;


function asContent(node, tokens) {
  var firstSignificantToken = node.getFirstSignificantToken(),
      lastSignificantToken = node.getLastSignificantToken(),
      firstToken = firstSignificantToken,
      ///
  lastToken = lastSignificantToken,
      ///
  firstTokenIndex = tokens.indexOf(firstToken),
      lastTokenIndex = tokens.indexOf(lastToken);

  var content = '';

  for (var index = firstTokenIndex; index <= lastTokenIndex; index++) {
    var token = tokens[index],
        tokenContent = token.getContent();

    content += tokenContent;
  }

  return content;
}

function replaceNodes(node, mappings) {
  var parentNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    return;
  }

  var ruleName = node.getRuleName(),
      childNodes = node.getChildNodes(),
      replacementNodeClass = mappings[ruleName] || null;

  if (replacementNodeClass) {
    var replacedNode = node,
        ///
    replacementNode = NonTerminalNode.fromRuleNameAndChildNodes(replacementNodeClass, ruleName, childNodes);

    if (parentNode === null) {
      node = replacementNode; ///
    } else {
      var _childNodes = parentNode.getChildNodes();

      replace(_childNodes, replacementNode, function (childNode) {
        if (childNode === replacedNode) {
          return true;
        }
      });
    }
  }

  parentNode = node; ///

  childNodes.forEach(function (childNode) {
    var node = childNode; ///

    replaceNodes(node, mappings, parentNode);
  });

  return node;
}

module.exports = {
  asContent: asContent,
  replaceNodes: replaceNodes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvbm9kZS5qcyJdLCJuYW1lcyI6WyJwYXJzZXJzIiwicmVxdWlyZSIsIm5lY2Vzc2FyeSIsIk5vblRlcm1pbmFsTm9kZSIsImFycmF5VXRpbGl0aWVzIiwicmVwbGFjZSIsImFzQ29udGVudCIsIm5vZGUiLCJ0b2tlbnMiLCJmaXJzdFNpZ25pZmljYW50VG9rZW4iLCJnZXRGaXJzdFNpZ25pZmljYW50VG9rZW4iLCJsYXN0U2lnbmlmaWNhbnRUb2tlbiIsImdldExhc3RTaWduaWZpY2FudFRva2VuIiwiZmlyc3RUb2tlbiIsImxhc3RUb2tlbiIsImZpcnN0VG9rZW5JbmRleCIsImluZGV4T2YiLCJsYXN0VG9rZW5JbmRleCIsImNvbnRlbnQiLCJpbmRleCIsInRva2VuIiwidG9rZW5Db250ZW50IiwiZ2V0Q29udGVudCIsInJlcGxhY2VOb2RlcyIsIm1hcHBpbmdzIiwicGFyZW50Tm9kZSIsIm5vZGVUZXJtaW5hbE5vZGUiLCJpc1Rlcm1pbmFsTm9kZSIsInJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJjaGlsZE5vZGVzIiwiZ2V0Q2hpbGROb2RlcyIsInJlcGxhY2VtZW50Tm9kZUNsYXNzIiwicmVwbGFjZWROb2RlIiwicmVwbGFjZW1lbnROb2RlIiwiZnJvbVJ1bGVOYW1lQW5kQ2hpbGROb2RlcyIsImNoaWxkTm9kZSIsImZvckVhY2giLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLGVBQVIsQ0FBaEI7QUFBQSxJQUEwQztBQUNwQ0MsWUFBWUQsUUFBUSxXQUFSLENBRGxCOztBQUdNLElBQUVFLGVBQUYsR0FBc0JILE9BQXRCLENBQUVHLGVBQUY7QUFBQSxJQUNFQyxjQURGLEdBQ3FCRixTQURyQixDQUNFRSxjQURGO0FBQUEsSUFFRUMsT0FGRixHQUVjRCxjQUZkLENBRUVDLE9BRkY7OztBQUlOLFNBQVNDLFNBQVQsQ0FBbUJDLElBQW5CLEVBQXlCQyxNQUF6QixFQUFpQztBQUMvQixNQUFNQyx3QkFBd0JGLEtBQUtHLHdCQUFMLEVBQTlCO0FBQUEsTUFDTUMsdUJBQXVCSixLQUFLSyx1QkFBTCxFQUQ3QjtBQUFBLE1BRU1DLGFBQWFKLHFCQUZuQjtBQUFBLE1BRTBDO0FBQ3BDSyxjQUFZSCxvQkFIbEI7QUFBQSxNQUd3QztBQUNsQ0ksb0JBQWtCUCxPQUFPUSxPQUFQLENBQWVILFVBQWYsQ0FKeEI7QUFBQSxNQUtNSSxpQkFBaUJULE9BQU9RLE9BQVAsQ0FBZUYsU0FBZixDQUx2Qjs7QUFPQSxNQUFJSSxVQUFVLEVBQWQ7O0FBRUEsT0FBSyxJQUFJQyxRQUFRSixlQUFqQixFQUFrQ0ksU0FBU0YsY0FBM0MsRUFBMkRFLE9BQTNELEVBQW9FO0FBQ2xFLFFBQU1DLFFBQVFaLE9BQU9XLEtBQVAsQ0FBZDtBQUFBLFFBQ01FLGVBQWVELE1BQU1FLFVBQU4sRUFEckI7O0FBR0FKLGVBQVdHLFlBQVg7QUFDRDs7QUFFRCxTQUFPSCxPQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssWUFBVCxDQUFzQmhCLElBQXRCLEVBQTRCaUIsUUFBNUIsRUFBeUQ7QUFBQSxNQUFuQkMsVUFBbUIsdUVBQU4sSUFBTTs7QUFDdkQsTUFBTUMsbUJBQW1CbkIsS0FBS29CLGNBQUwsRUFBekI7O0FBRUEsTUFBSUQsZ0JBQUosRUFBc0I7QUFDcEI7QUFDRDs7QUFFRCxNQUFNRSxXQUFXckIsS0FBS3NCLFdBQUwsRUFBakI7QUFBQSxNQUNNQyxhQUFhdkIsS0FBS3dCLGFBQUwsRUFEbkI7QUFBQSxNQUVNQyx1QkFBdUJSLFNBQVNJLFFBQVQsS0FBc0IsSUFGbkQ7O0FBSUEsTUFBSUksb0JBQUosRUFBMEI7QUFDeEIsUUFBTUMsZUFBZTFCLElBQXJCO0FBQUEsUUFBMkI7QUFDckIyQixzQkFBa0IvQixnQkFBZ0JnQyx5QkFBaEIsQ0FBMENILG9CQUExQyxFQUFnRUosUUFBaEUsRUFBMEVFLFVBQTFFLENBRHhCOztBQUdBLFFBQUlMLGVBQWUsSUFBbkIsRUFBeUI7QUFDdkJsQixhQUFPMkIsZUFBUCxDQUR1QixDQUNDO0FBQ3pCLEtBRkQsTUFFTztBQUNMLFVBQU1KLGNBQWFMLFdBQVdNLGFBQVgsRUFBbkI7O0FBRUExQixjQUFReUIsV0FBUixFQUFvQkksZUFBcEIsRUFBcUMsVUFBU0UsU0FBVCxFQUFvQjtBQUN2RCxZQUFJQSxjQUFjSCxZQUFsQixFQUFnQztBQUM5QixpQkFBTyxJQUFQO0FBQ0Q7QUFDRixPQUpEO0FBS0Q7QUFDRjs7QUFFRFIsZUFBYWxCLElBQWIsQ0E1QnVELENBNEJuQzs7QUFFcEJ1QixhQUFXTyxPQUFYLENBQW1CLFVBQVNELFNBQVQsRUFBb0I7QUFDckMsUUFBTTdCLE9BQU82QixTQUFiLENBRHFDLENBQ2I7O0FBRXhCYixpQkFBYWhCLElBQWIsRUFBbUJpQixRQUFuQixFQUE2QkMsVUFBN0I7QUFDRCxHQUpEOztBQU1BLFNBQU9sQixJQUFQO0FBQ0Q7O0FBRUQrQixPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZqQyxzQkFEZTtBQUVmaUI7QUFGZSxDQUFqQiIsImZpbGUiOiJub2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpLCAvLy9cbiAgICAgIG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCB7IE5vblRlcm1pbmFsTm9kZSB9ID0gcGFyc2VycyxcbiAgICAgIHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgcmVwbGFjZSB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGFzQ29udGVudChub2RlLCB0b2tlbnMpIHtcbiAgY29uc3QgZmlyc3RTaWduaWZpY2FudFRva2VuID0gbm9kZS5nZXRGaXJzdFNpZ25pZmljYW50VG9rZW4oKSxcbiAgICAgICAgbGFzdFNpZ25pZmljYW50VG9rZW4gPSBub2RlLmdldExhc3RTaWduaWZpY2FudFRva2VuKCksXG4gICAgICAgIGZpcnN0VG9rZW4gPSBmaXJzdFNpZ25pZmljYW50VG9rZW4sIC8vL1xuICAgICAgICBsYXN0VG9rZW4gPSBsYXN0U2lnbmlmaWNhbnRUb2tlbiwgLy8vXG4gICAgICAgIGZpcnN0VG9rZW5JbmRleCA9IHRva2Vucy5pbmRleE9mKGZpcnN0VG9rZW4pLFxuICAgICAgICBsYXN0VG9rZW5JbmRleCA9IHRva2Vucy5pbmRleE9mKGxhc3RUb2tlbik7XG5cbiAgbGV0IGNvbnRlbnQgPSAnJztcblxuICBmb3IgKGxldCBpbmRleCA9IGZpcnN0VG9rZW5JbmRleDsgaW5kZXggPD0gbGFzdFRva2VuSW5kZXg7IGluZGV4KyspIHtcbiAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1tpbmRleF0sXG4gICAgICAgICAgdG9rZW5Db250ZW50ID0gdG9rZW4uZ2V0Q29udGVudCgpO1xuXG4gICAgY29udGVudCArPSB0b2tlbkNvbnRlbnQ7XG4gIH1cblxuICByZXR1cm4gY29udGVudDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZU5vZGVzKG5vZGUsIG1hcHBpbmdzLCBwYXJlbnROb2RlID0gbnVsbCkge1xuICBjb25zdCBub2RlVGVybWluYWxOb2RlID0gbm9kZS5pc1Rlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlVGVybWluYWxOb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcnVsZU5hbWUgPSBub2RlLmdldFJ1bGVOYW1lKCksXG4gICAgICAgIGNoaWxkTm9kZXMgPSBub2RlLmdldENoaWxkTm9kZXMoKSxcbiAgICAgICAgcmVwbGFjZW1lbnROb2RlQ2xhc3MgPSBtYXBwaW5nc1tydWxlTmFtZV0gfHwgbnVsbDtcblxuICBpZiAocmVwbGFjZW1lbnROb2RlQ2xhc3MpIHtcbiAgICBjb25zdCByZXBsYWNlZE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICByZXBsYWNlbWVudE5vZGUgPSBOb25UZXJtaW5hbE5vZGUuZnJvbVJ1bGVOYW1lQW5kQ2hpbGROb2RlcyhyZXBsYWNlbWVudE5vZGVDbGFzcywgcnVsZU5hbWUsIGNoaWxkTm9kZXMpO1xuXG4gICAgaWYgKHBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICAgIG5vZGUgPSByZXBsYWNlbWVudE5vZGU7IC8vL1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjaGlsZE5vZGVzID0gcGFyZW50Tm9kZS5nZXRDaGlsZE5vZGVzKCk7XG5cbiAgICAgIHJlcGxhY2UoY2hpbGROb2RlcywgcmVwbGFjZW1lbnROb2RlLCBmdW5jdGlvbihjaGlsZE5vZGUpIHtcbiAgICAgICAgaWYgKGNoaWxkTm9kZSA9PT0gcmVwbGFjZWROb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHBhcmVudE5vZGUgPSBub2RlOyAgLy8vXG5cbiAgY2hpbGROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkTm9kZSkge1xuICAgIGNvbnN0IG5vZGUgPSBjaGlsZE5vZGU7IC8vL1xuXG4gICAgcmVwbGFjZU5vZGVzKG5vZGUsIG1hcHBpbmdzLCBwYXJlbnROb2RlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc0NvbnRlbnQsXG4gIHJlcGxhY2VOb2Rlc1xufTtcbiJdfQ==