"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByClass = queryByClass;
exports.queryByClasses = queryByClasses;
exports.queryByExpression = queryByExpression;
exports["default"] = void 0;

var _query = _interopRequireDefault(require("../query"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function queryByClass(node, Class) {
  var nodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (node instanceof Class) {
    nodes.push(node);
  }

  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var childNodes = node.getChildNodes();
    childNodes.forEach(function (childNode) {
      return queryByClass(childNode, Class, nodes);
    });
  }

  return nodes;
}

function queryByClasses(node, Classes) {
  var nodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  Classes.some(function (Class) {
    if (node instanceof Class) {
      nodes.push(node);
      return true;
    }
  });
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var childNodes = node.getChildNodes();
    childNodes.forEach(function (childNode) {
      return queryByClasses(childNode, Classes, nodes);
    });
  }

  return nodes;
}

function queryByExpression(node, expression, maximumDepth) {
  var query = _query["default"].fromExpression(expression, maximumDepth),
      nodes = query.execute(node);

  return nodes;
}

var _default = {
  queryByClass: queryByClass,
  queryByClasses: queryByClasses,
  queryByExpression: queryByExpression
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXJ5LmpzIl0sIm5hbWVzIjpbInF1ZXJ5QnlDbGFzcyIsIm5vZGUiLCJDbGFzcyIsIm5vZGVzIiwicHVzaCIsIm5vZGVOb25UZXJtaW5hbE5vZGUiLCJpc05vblRlcm1pbmFsTm9kZSIsImNoaWxkTm9kZXMiLCJnZXRDaGlsZE5vZGVzIiwiZm9yRWFjaCIsImNoaWxkTm9kZSIsInF1ZXJ5QnlDbGFzc2VzIiwiQ2xhc3NlcyIsInNvbWUiLCJxdWVyeUJ5RXhwcmVzc2lvbiIsImV4cHJlc3Npb24iLCJtYXhpbXVtRGVwdGgiLCJxdWVyeSIsIlF1ZXJ5IiwiZnJvbUV4cHJlc3Npb24iLCJleGVjdXRlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBOzs7O0FBRU8sU0FBU0EsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLEtBQTVCLEVBQStDO0FBQUEsTUFBWkMsS0FBWSx1RUFBSixFQUFJOztBQUNwRCxNQUFJRixJQUFJLFlBQVlDLEtBQXBCLEVBQTJCO0FBQ3pCQyxJQUFBQSxLQUFLLENBQUNDLElBQU4sQ0FBV0gsSUFBWDtBQUNEOztBQUVELE1BQU1JLG1CQUFtQixHQUFHSixJQUFJLENBQUNLLGlCQUFMLEVBQTVCOztBQUVBLE1BQUlELG1CQUFKLEVBQXlCO0FBQ3ZCLFFBQU1FLFVBQVUsR0FBR04sSUFBSSxDQUFDTyxhQUFMLEVBQW5CO0FBRUFELElBQUFBLFVBQVUsQ0FBQ0UsT0FBWCxDQUFtQixVQUFDQyxTQUFEO0FBQUEsYUFBZVYsWUFBWSxDQUFDVSxTQUFELEVBQVlSLEtBQVosRUFBbUJDLEtBQW5CLENBQTNCO0FBQUEsS0FBbkI7QUFDRDs7QUFFRCxTQUFPQSxLQUFQO0FBQ0Q7O0FBRU0sU0FBU1EsY0FBVCxDQUF3QlYsSUFBeEIsRUFBOEJXLE9BQTlCLEVBQW1EO0FBQUEsTUFBWlQsS0FBWSx1RUFBSixFQUFJO0FBQ3hEUyxFQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxVQUFDWCxLQUFELEVBQVc7QUFDdEIsUUFBSUQsSUFBSSxZQUFZQyxLQUFwQixFQUEyQjtBQUN6QkMsTUFBQUEsS0FBSyxDQUFDQyxJQUFOLENBQVdILElBQVg7QUFFQSxhQUFPLElBQVA7QUFDRDtBQUNGLEdBTkQ7QUFRQSxNQUFNSSxtQkFBbUIsR0FBR0osSUFBSSxDQUFDSyxpQkFBTCxFQUE1Qjs7QUFFQSxNQUFJRCxtQkFBSixFQUF5QjtBQUN2QixRQUFNRSxVQUFVLEdBQUdOLElBQUksQ0FBQ08sYUFBTCxFQUFuQjtBQUVBRCxJQUFBQSxVQUFVLENBQUNFLE9BQVgsQ0FBbUIsVUFBQ0MsU0FBRDtBQUFBLGFBQWVDLGNBQWMsQ0FBQ0QsU0FBRCxFQUFZRSxPQUFaLEVBQXFCVCxLQUFyQixDQUE3QjtBQUFBLEtBQW5CO0FBQ0Q7O0FBRUQsU0FBT0EsS0FBUDtBQUNEOztBQUVNLFNBQVNXLGlCQUFULENBQTJCYixJQUEzQixFQUFpQ2MsVUFBakMsRUFBNkNDLFlBQTdDLEVBQTJEO0FBQ2hFLE1BQU1DLEtBQUssR0FBR0Msa0JBQU1DLGNBQU4sQ0FBcUJKLFVBQXJCLEVBQWlDQyxZQUFqQyxDQUFkO0FBQUEsTUFDTWIsS0FBSyxHQUFHYyxLQUFLLENBQUNHLE9BQU4sQ0FBY25CLElBQWQsQ0FEZDs7QUFHQSxTQUFPRSxLQUFQO0FBQ0Q7O2VBRWM7QUFDYkgsRUFBQUEsWUFBWSxFQUFaQSxZQURhO0FBRWJXLEVBQUFBLGNBQWMsRUFBZEEsY0FGYTtBQUdiRyxFQUFBQSxpQkFBaUIsRUFBakJBO0FBSGEsQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgUXVlcnkgZnJvbSBcIi4uL3F1ZXJ5XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeUJ5Q2xhc3Mobm9kZSwgQ2xhc3MsIG5vZGVzID0gW10pIHtcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBDbGFzcykge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH1cblxuICBjb25zdCBub2RlTm9uVGVybWluYWxOb2RlID0gbm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3QgY2hpbGROb2RlcyA9IG5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gICAgY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZE5vZGUpID0+IHF1ZXJ5QnlDbGFzcyhjaGlsZE5vZGUsIENsYXNzLCBub2RlcykpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlCeUNsYXNzZXMobm9kZSwgQ2xhc3Nlcywgbm9kZXMgPSBbXSkge1xuICBDbGFzc2VzLnNvbWUoKENsYXNzKSA9PiB7XG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBDbGFzcykge1xuICAgICAgbm9kZXMucHVzaChub2RlKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBub2RlTm9uVGVybWluYWxOb2RlID0gbm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3QgY2hpbGROb2RlcyA9IG5vZGUuZ2V0Q2hpbGROb2RlcygpO1xuXG4gICAgY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZE5vZGUpID0+IHF1ZXJ5QnlDbGFzc2VzKGNoaWxkTm9kZSwgQ2xhc3Nlcywgbm9kZXMpKTtcbiAgfVxuXG4gIHJldHVybiBub2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5QnlFeHByZXNzaW9uKG5vZGUsIGV4cHJlc3Npb24sIG1heGltdW1EZXB0aCkge1xuICBjb25zdCBxdWVyeSA9IFF1ZXJ5LmZyb21FeHByZXNzaW9uKGV4cHJlc3Npb24sIG1heGltdW1EZXB0aCksXG4gICAgICAgIG5vZGVzID0gcXVlcnkuZXhlY3V0ZShub2RlKTtcblxuICByZXR1cm4gbm9kZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcXVlcnlCeUNsYXNzLFxuICBxdWVyeUJ5Q2xhc3NlcyxcbiAgcXVlcnlCeUV4cHJlc3Npb25cbn07XG4iXX0=